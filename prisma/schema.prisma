// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  name       String
  picture    String?
  role       Role         @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id    String
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  // Keep track of User progress on worlds & Levels
  worlds     User_World[]
  levels     User_Level[]
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model Permission {
  id         String   @id @default(cuid())
  name       String
  roles      Role[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// Model for World
model World {
  id            String       @id @default(cuid())
  name          String
  // total_possible_stars Int       @default(0)
  x_position    Int
  y_position    Int
  levels        Level[]
  user_world    User_World[]
  prerequisites World[]      @relation("WorldPrerequisites")
  requiredBy    World[]      @relation("WorldPrerequisites")
  flip_arrow    Boolean      @default(false)
}

// Model for Level 
model Level {
  id            String       @id @default(cuid())
  title         String
  description   String
  type          Level_Type
  color         Color
  name          String
  x_position    Int
  y_position    Int
  leetcode_url  String?
  order         Int          @default(0)
  // stars     Int
  world         World        @relation(fields: [world_id], references: [id], onDelete: Cascade)
  world_id      String
  user_levels   User_Level[]
  prerequisites Level[]      @relation("LevelPrerequisites")
  requiredBy    Level[]      @relation("LevelPrerequisites")
  flip_arrow    Boolean      @default(false)
}

// Model to track user progress for each world
model User_World {
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  world      World    @relation(fields: [world_id], references: [id], onDelete: Cascade)
  user_id    String
  world_id   String
  // stars_got Int       @default(0)
  unlocked   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([user_id, world_id])
}

// Model to track user progress for each Level
model User_Level {
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  level      Level        @relation(fields: [level_id], references: [id], onDelete: Cascade)
  user_id    String
  level_id   String
  status     Level_Status @default(INCOMPLETE)
  unlocked   Boolean      @default(false)
  notes      String?
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@id([user_id, level_id])
}

enum Color {
  BLUE
  GREEN
  RED
  YELLOW
}

enum Level_Type {
  LEARN
  PROBLEM
  BONUS
}

enum Level_Status {
  INCOMPLETE
  COMPLETE
}
