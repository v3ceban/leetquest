import fs, { link } from "fs";
import path from "path";
import { PrismaClient } from "@prisma/client"
const prisma = new PrismaClient();

// Settings
let array_levels = [
    "Welcome to LeetQuest",
    "Introduction to Arrays",
    "Introduction to Strings",
    "Introduction to Standard Input and Output",
    "Add Two Numbers",
    "Remove Elements from Array",
    "Remove Vowels from String",
    "Array to Sentence",]
let array_file_names = [
    "welcome_to_leetquest.html",
    "introduction_to_arrays.html",
    "introduction_to_strings.html",
    "introduction_to_standard_input_and_output.html",
    "add_two_numbers.html",
    "remove_elements_from_array.html",
    "remove_vowels_from_string.html",
    "array_to_sentence.html",]
let hash_map_levels = [
    "Set Basics",
    "Set Conversion",
    "Set Operations",
    "Map Basics",
    "Map Counting",
    "Map Comparison",
    "String Mapping",
    "Index Mapping",
    "Preset Mapping",
    "A Message",
    "Contains Duplicate",
    "Missing Number",
    "Find All Numbers Disappeared in an Array",
    "Jewels and Stones",
    "Intersection of Two Arrays",
    "Majority Element",
    "Majority Element II",
    "Valid Anagram",
    "Intersection of Two Arrays II",
    "Ransom Note",
    "Isomorphic Strings",
    "Word Pattern",
    "Contains Duplicate II",
    "Two Sum",
    "Roman to Integer",
    "Valid Sudoku",
    "Top K Frequent Elements",
    "Group Anagrams",
    "Integer to Roman",
    "Integer to English Words",]
let hash_map_file_names = [
    "set_basics.html",
    "set_conversion.html",
    "set_operations.html",
    "map_basics.html",
    "map_counting.html",
    "map_comparison.html",
    "string_mapping.html",
    "index_mapping.html",
    "preset_mapping.html",
    "a_message.html",
    "contains_duplicate.html",
    "missing_number.html",
    "find_all_numbers_disappeared_in_an_array.html",
    "jewels_and_stones.html",
    "intersection_of_two_arrays.html",
    "majority_element.html",
    "majority_element_ii.html",
    "valid_anagram.html",
    "intersection_of_two_arrays_ii.html",
    "ransom_note.html",
    "isomorphic_strings.html",
    "word_pattern.html",
    "contains_duplicate_ii.html",
    "two_sum.html",
    "roman_to_integer.html",
    "valid_sudoku.html",
    "top_k_frequent_elements.html",
    "group_anagrams.html",
    "integer_to_roman.html",
    "integer_to_english_words.html",];
let stack_levels = [
    "Stack Basics",
    "Tracking Depth",
    "Stack Reversal",
    "Monotonic Stack",
    "Valid Parentheses",
    "Remove All Adjacent Duplicates In String",
    "Minimum String Length After Removing Substrings",
    "Backspace String Compare",
    "Baseball Game",
    "Evaluate Reverse Polish Notation",
    "Asteroid Collision",
    "Maximum Nesting Depth of the Parentheses",
    "Crawler Log Folder",
    "Reverse Prefix of Word",
    "Minimum Add to Make Parentheses Valid",
    "Minimum Remove to Make Valid Parentheses",
    "Score of Parentheses",
    "Decode String",
    "Longest Valid Parentheses",
    "Next Greater Element I",
    "Final Prices With a Special Discount in a Shop",
    "Remove K Digits",
    "Daily Temperatures",
    "Maximum Width Ramp",
    "Largest Rectangle in Histogram",];
let stack_file_names = [
    "stack_basics.html",
    "tracking_depth.html",
    "stack_reversal.html",
    "monotonic_stack.html",
    "valid_parentheses.html",
    "remove_all_adjacent_duplicates_in_string.html",
    "minimum_string_length_after_removing_substrings.html",
    "backspace_string_compare.html",
    "baseball_game.html",
    "evaluate_reverse_polish_notation.html",
    "asteroid_collision.html",
    "maximum_nesting_depth_of_the_parentheses.html",
    "crawler_log_folder.html",
    "reverse_prefix_of_word.html",
    "minimum_add_to_make_parentheses_valid.html",
    "minimum_remove_to_make_valid_parentheses.html",
    "score_of_parentheses.html",
    "decode_string.html",
    "longest_valid_parentheses.html",
    "next_greater_element_i.html",
    "final_prices_with_a_special_discount_in_a_shop.html",
    "remove_k_digits.html",
    "daily_temperatures.html",
    "maximum_width_ramp.html",
    "largest_rectangle_in_histogram.html",];
let two_pointers_levels = [
    "Two Pointers Basics",
    "Checking and Swapping",
    "Reordering by Swapping",
    "Two Structures",
    "Advanced Checking",
    "Reverse String",
    "Reverse Vowels of a String",
    "Reverse Words in a String",
    "Sort Array by Parity",
    "Sort Array by Parity II",
    "Sort Colors",
    "Move Zeros",
    "Remove Element",
    "Remove Duplicates from Sorted Array",
    "Is Subsequence",
    "Find the Index of the First Occurrence in a String",
    "Compare Version Number",
    "Merge Sorted Array",
    "Assign Cookies",
    "Shortest Distance to a Character",
    "Valid Palindrome",
    "Two Sum II - Input Array is Sorted",
    "3Sum",
    "4Sum",
    "Container With Most Water",
    "Trapping Rain Water",];
let two_pointers_file_names = [
    "two_pointers_basics.html",
    "checking_and_swapping.html",
    "reordering_by_swapping.html",
    "two_structures.html",
    "advanced_checking.html",
    "reverse_string.html",
    "reverse_vowels_of_a_string.html",
    "reverse_words_in_a_string.html",
    "sort_array_by_parity.html",
    "sort_array_by_parity_ii.html",
    "sort_colors.html",
    "move_zeroes.html",
    "remove_element.html",
    "remove_duplicates_from_sorted_array.html",
    "is_subsequence.html",
    "find_the_index_of_the_first_occurrence_in_a_string.html",
    "compare_version_number.html",
    "merge_sorted_array.html",
    "assign_cookies.html",
    "shortest_distance_to_a_character.html",
    "valid_palindrome.html",
    "two_sum_ii_input_array_is_sorted.html",
    "3sum.html",
    "4sum.html",
    "container_with_most_water.html",
    "trapping_rain_water.html",];
let sliding_window_levels = [
    "Rolling",
    "Inching",
    "Combination Shortcut",
    "Rolling Hash",
    "Inching Hash",
    "Maximum Average Subarray I",
    "Defuse the Bomb",
    "Find K Closest Elements",
    "Grumpy Bookstore Owner",
    "Longest Nice Substring",
    "Best Time to Buy and Sell Stock",
    "Minimum Size Subarray Sum",
    "Subarray Product Less Than K",
    "Substrings of Size Three with Distinct Characters",
    "Repeated DNA Sequences",
    "Find All Anagrams in a String",
    "Permutation in String",
    "Longest Substring Without Repeating Characters",
    "Fruit Into Baskets",
    "Longest Repeating Character Replacement",
    "Minimum Window Substring",
    "Binary Subarrays With Sum",
    "Subarrays with K Different Integers",]
let sliding_window_file_names = [
    "rolling.html",
    "inching.html",
    "combination_shortcut.html",
    "rolling_hash.html",
    "inching_hash.html",
    "maximum_average_subarray_i.html",
    "defuse_the_bomb.html",
    "find_k_closest_elements.html",
    "grumpy_bookstore_owner.html",
    "longest_nice_substring.html",
    "best_time_to_buy_and_sell_stock.html",
    "minimum_size_subarray_sum.html",
    "subarray_product_less_than_k.html",
    "substrings_of_size_three_with_distinct_characters.html",
    "repeated_dna_sequences.html",
    "find_all_anagrams_in_a_string.html",
    "permutation_in_string.html",
    "longest_substring_without_repeating_characters.html",
    "fruit_into_baskets.html",
    "longest_repeating_character_replacement.html",
    "minimum_window_substring.html",
    "binary_subarrays_with_sum.html",
    "subarrays_with_k_different_integers.html",]
let binary_search_levels = [
    "Search a Structure",
    "Search an Answer Space",
    "Uncertainty",
    "Binary Search",
    "Search a 2D Matrix",
    "Search in Rotated Sorted Array",
    "Search in Rotated Sorted Array II",
    "Guess Number Higher or Lower",
    "Valid Perfect Square",
    "Search Insert Position",
    "First Bad Version",
    "Find First and Last Position of Element in Sorted Array",
    "Find Minimum in Rotated Sorted Array",
    "Find Peak Element",
    "Koko Eating Bananas",
    "Median of Two Sorted Arrays",]
let binary_search_file_names = [
    "search_a_structure.html",
    "search_an_answer_space.html",
    "uncertainty.html",
    "binary_search.html",
    "search_a_2d_matrix.html",
    "search_in_rotated_sorted_array.html",
    "search_in_rotated_sorted_array_ii.html",
    "guess_number_higher_or_lower.html",
    "valid_perfect_square.html",
    "search_insert_position.html",
    "first_bad_version.html",
    "find_first_and_last_position_of_element_in_sorted_array.html",
    "find_minimum_in_rotated_sorted_array.html",
    "find_peak_element.html",
    "koko_eating_bananas.html",
    "median_of_two_sorted_arrays.html",]
let linked_list_levels = [
    "Linked List Basics",
    "Multiple Pointers",
    "Slow and Fast Pointers",
    "Multiple Lists",
    "Remove Linked List Elements",
    "Remove Duplicates from Sorted List",
    "Reverse Linked List",
    "Remove Duplicates from Sorted List II",
    "Reverse Linked List II",
    "Reverse Nodes in k-Group",
    "Swap Nodes in Pairs",
    "Odd Even Linked List",
    "Partition List",
    "Remove Nth Node From End of List",
    "Rotate List",
    "Middle of the Linked List",
    "Palindrome Linked List",
    "Linked List Cycle",
    "Linked List Cycle II",
    "Merge Two Sorted Lists",
    "Intersection of Two Linked Lists",
    "Merge k Sorted Lists",
    "Reorder List",]
let linked_list_file_names = [
    "linked_list_basics.html",
    "multiple_pointers.html",
    "slow_and_fast_pointers.html",
    "multiple_lists.html",
    "remove_linked_list_elements.html",
    "remove_duplicates_from_sorted_list.html",
    "reverse_linked_list.html",
    "remove_duplicates_from_sorted_list_ii.html",
    "reverse_linked_list_ii.html",
    "reverse_nodes_in_k_group.html",
    "swap_nodes_in_pairs.html",
    "odd_even_linked_list.html",
    "partition_list.html",
    "remove_nth_node_from_end_of_list.html",
    "rotate_list.html",
    "middle_of_the_linked_list.html",
    "palindrome_linked_list.html",
    "linked_list_cycle.html",
    "linked_list_cycle_ii.html",
    "merge_two_sorted_lists.html",
    "intersection_of_two_linked_lists.html",
    "merge_k_sorted_lists.html",
    "reorder_list.html",]
let tree_levels = [
    "Tree Basics",
    "Recursion Logistics",
    "Level Order Traversal",
    "N-ary Trees",
    "Binary Tree Preorder Traversal",
    "Binary Tree Inorder Traversal",
    "Binary Tree Postorder Traversal",
    "Search in a Binary Search Tree",
    "Kth Smallest Element in a BST",
    "Minimum Absolute Difference in BST",
    "Two Sum IV - Input is a BST",
    "Same Tree",
    "Symmetric Tree",
    "Subtree of Another Tree",
    "Leaf Similar Trees",
    "Flip Equivalent Binary Trees",
    "Invert Binary Tree",
    "Increasing Order Search Tree",
    "Flatten Binary Tree to Linked List",
    "Validate Binary Search Tree",
    "Maximum Depth of Binary Tree",
    "Minimum Depth of Binary Tree",
    "Cousins in Binary Tree",
    "Balanced Binary Tree",
    "Diameter of Binary Tree",
    "Path Sum",
    "Count Complete Tree Nodes",
    "Univalued Binary Tree",
    "Find Mode in Binary Search Tree",
    "Second Minimum Node in a Binary Tree",
    "Path Sum II",
    "Path Sum III",
    "Binary Tree Maximum Path Sum",
    "Range Sum of BST",
    "Binary Tree Paths",
    "Binary Tree Tilt",
    "Sum of Left Leaves",
    "Sum Root to Leaf Numbers",
    "Binary Tree Level Order Traversal",
    "Binary Tree Zigzag Level Order Traversal",
    "Binary Tree Right Side View",
    "Populating Next Right Pointers in Each Node",
    "Populating Next Right Pointers in Each Node II",
    "Frog Position After T Seconds",
    "N-ary Tree Preorder Traversal",
    "N-ary Tree Postorder Traversal",
    "Maximum Depth of N-ary Tree",
    "N-ary Tree Level Order Traversal",]
let tree_file_names = [
    "tree_basics.html",
    "recursion_logistics.html",
    "level_order_traversal.html",
    "n_ary_trees.html",
    "binary_tree_preorder_traversal.html",
    "binary_tree_inorder_traversal.html",
    "binary_tree_postorder_traversal.html",
    "search_in_a_binary_search_tree.html",
    "kth_smallest_element_in_a_bst.html",
    "minimum_absolute_difference_in_bst.html",
    "two_sum_iv_input_is_a_bst.html",
    "same_tree.html",
    "symmetric_tree.html",
    "subtree_of_another_tree.html",
    "leaf_similar_trees.html",
    "flip_equivalent_binary_trees.html",
    "invert_binary_tree.html",
    "increasing_order_search_tree.html",
    "flatten_binary_tree_to_linked_list.html",
    "validate_binary_search_tree.html",
    "maximum_depth_of_binary_tree.html",
    "minimum_depth_of_binary_tree.html",
    "cousins_in_binary_tree.html",
    "balanced_binary_tree.html",
    "diameter_of_binary_tree.html",
    "path_sum.html",
    "count_complete_tree_nodes.html",
    "univalued_binary_tree.html",
    "find_mode_in_binary_search_tree.html",
    "second_minimum_node_in_a_binary_tree.html",
    "path_sum_ii.html",
    "path_sum_iii.html",
    "binary_tree_maximum_path_sum_trees.html",
    "range_sum_of_bst_trees.html",
    "binary_tree_paths_trees.html",
    "binary_tree_tilt_trees.html",
    "sum_of_left_leaves_trees.html",
    "sum_root_to_leaf_numbers_trees.html",
    "binary_tree_level_order_traversal_trees.html",
    "binary_tree_zigzag_level_order_traversal_trees.html",
    "binary_tree_right_side_view_trees.html",
    "populating_next_right_pointers_in_each_node_trees.html",
    "populating_next_right_pointers_in_each_node_ii_trees.html",
    "frog_position_after_t_seconds_trees.html",
    "n_ary_tree_preorder_traversal_trees.html",
    "n_ary_tree_postorder_traversal_trees.html",
    "maximum_depth_of_n_ary_tree_trees.html",
    "n_ary_tree_level_order_traversal_trees.html",]
let graph_levels = [
    "Graph Basics",
    "Depth First Search",
    "Breadth First Search",
    "Keys and Rooms",
    "Number of Islands",
    "Surround Regions",
    "Max Area of Island",
    "Clone Graph",
    "Rotting Oranges",
    "Course Schedule",
    "Course Schedule II",
    "Word Ladder",
    "Word Ladder II",]
let graph_file_names = [
    "graph_basics.html",
    "depth_first_search.html",
    "breadth_first_search.html",
    "keys_and_rooms.html",
    "number_of_islands.html",
    "surround_regions.html",
    "max_area_of_island.html",
    "clone_graph.html",
    "rotting_oranges.html",
    "course_schedule.html",
    "course_schedule_ii.html",
    "word_ladder.html",
    "word_ladder_ii.html",]
let heap_levels = [
    "Heap Basics",
    "Last Stone Weight",
    "Kth Largest Element in an Array",
    "K Closest Points to Origin",
    "Task Scheduler",
    "Find Median From Data Stream",
    "IPO",]
let heap_file_names = [
    "heap_basics.html",
    "last_stone_weight.html",
    "kth_largest_element_in_an_array.html",
    "k_closest_points_to_origin.html",
    "task_scheduler.html",
    "find_median_from_data_stream.html",
    "ipo.html",]
let backtracking_levels = [
    "Getting Familiar",
    "Subsets",
    "Subsets II",
    "Permutations",
    "Permutations II",
    "Combination Sum",
    "Combination Sum II",
    "Combination Sum III",
    "Combination Sum IV",
    "Generate Parentheses",
    "Unique Binary Search Trees",
    "Unique Binary Search Trees II",
    "Sudoku Solver",
    "N-Queens",]
let backtracking_file_names = [
    "getting_familiar.html",
    "subsets.html",
    "subsets_ii.html",
    "permutations.html",
    "permutations_ii.html",
    "combination_sum.html",
    "combination_sum_ii.html",
    "combination_sum_iii.html",
    "combination_sum_iv.html",
    "generate_parentheses.html",
    "unique_binary_search_trees.html",
    "unique_binary_search_trees_ii.html",
    "sudoku_solver.html",
    "n_queens.html",]
let dynamic_programming_levels = [
    "Backtracking with Memory",
    "Variable DP",
    "Array DP",
    "2D DP",
    "Legacy Set",
    "Climbing Stairs",
    "Count Vowels Permutation",
    "Pascal’s Triangle",
    "Min Cost Climbing Stairs",
    "House Robber",
    "House Robber II",
    "Coin Change",
    "Decode Ways",
    "Word Break",
    "Word Break II",
    "Longest Common Subsequence",
    "Edit Distance",
    "Coin Change II",
    "Interleaving String",
    "Distinct Subsequences",
    "Regular Expression Matching",
    "Wildcard Matching",
    "Best Time to Buy and Sell Stock (Sliding Window)",
    "Is Subsequence (Two Pointers)",
    "Generate Parentheses (Backtracking)",
    "Longest Valid Parentheses (Stacks)",
    "Binary Tree Maximum Path Sum",
    "Trapping Rain Water (Two Pointers)",]
let dynamic_programming_file_names = [
    "backtracking_with_memory.html",
    "variable_dp.html",
    "array_dp.html",
    "2d_dp.html",
    "legacy_set.html",
    "climbing_stairs.html",
    "count_vowels_permutation.html",
    "pascal_triangle.html",
    "min_cost_climbing_stairs.html",
    "house_robber.html",
    "house_robber_ii.html",
    "coin_change.html",
    "decode_ways.html",
    "word_break.html",
    "word_break_ii.html",
    "longest_common_subsequence.html",
    "edit_distance.html",
    "coin_change_ii.html",
    "interleaving_string.html",
    "distinct_subsequences.html",
    "regular_expression_matching.html",
    "wildcard_matching.html",
    "best_time_to_buy_and_sell_stock_sliding_window.html",
    "is_subsequence_two_pointers.html",
    "generate_parentheses_backtracking.html",
    "longest_valid_parentheses_stacks.html",
    "binary_tree_maximum_path_sum_trees.html",
    "trapping_rain_water_two_pointers.html",]

let levels = tree_levels;
let file_names = tree_file_names;
// do some processing to get levelId you're already doing

// Loop through and update each level
for (let i = 0; i < levels.length; i++) {

let levelId = await prisma.level.findFirst({
    where: {
        title: levels[i],
    },
});
if (!levelId) {
    console.error(`Level with title ${levels[i]} not found`);
    continue; // Skip to the next iteration if levelId is not found
}

const htmlFilePath = path.join(process.cwd(), "src/lib/levels/tree/", file_names[i]);
const description = fs.readFileSync(htmlFilePath, "utf-8").replace(/\r?\n/g, ""); // need to delete new lines for it to be a proper string

await prisma.level.update({
    where: {
        id: levelId.id,
    },
    data: {
        description,
    },
});
}



// await prisma.level.update({
//     where: {
//         id: _Set_Basics.id,
//     },
//     data: {
//         description: "<h2>What is a Hash Set?</h2><p>A hash set is an unordered collection (set) of elements.</p><ul><li>A hash set has no indices. To refer to an element, you have to know the name of the element itself.</li><li>A hash set has no duplicates. If you try to add a duplicate to a set, the set will not be affected.</li></ul><h2>Basic Syntax</h2><p>Initializing a Hash Set:</p><ul><li>Empty Set: <code class=\"bg-gray-600 p-1 rounded\">hash_set = set()</code></li><li>Non-Empty Set: <code class=\"bg-gray-600 p-1 rounded\">hash_set = {'{1, 2, 3}'}</code></li></ul><p>Adding to a Hash Set:</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">hash_set.add(4)</code></li></ul><p>Removing from a Hash Set:</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">hash_set.remove(2)</code></li></ul><p>Checking if Element in Hash Set:</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">if 3 in hash_map:</code></li></ul><h2>Set Operations</h2><p>Set Union: All elements in set1 <span class=\"!bg-red-500\">OR</span> set2</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">set3 = set1 | set2</code></li></ul><p>Set Intersection: All elements in set1 AND set2</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">set3 = set1 & set2</code></li></ul><p>Set Difference: All elements in set1 that are NOT in set2</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">set3 = set1 - set2</code></li></ul><p>Set Exclusive Union: All elements ONLY in set1 OR set2</p><ul><li><code class=\"bg-gray-600 p-1 rounded\">set3 = set1 ^ set2</code></li></ul>",
//     },
// });